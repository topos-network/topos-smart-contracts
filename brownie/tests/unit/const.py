import brownie

# const
APPROVE_AMOUNT = 50
CERT_BYTES = "0xdeaf"
CERT_BYTES_2 = "0xdeaa"
CERT_BYTES_3 = "0xdeab"
CERT_BYTES_4 = "0xdeff"
CERT_POSITION = 5
CERT_POSITION_2 = 89
CERT_POSITION_3 = 99
CERT_POSITION_4 = 100
CERT_ID = brownie.convert.to_bytes(CERT_BYTES, "bytes32")
CERT_ID_2 = brownie.convert.to_bytes(CERT_BYTES_2, "bytes32")
CERT_ID_3 = brownie.convert.to_bytes(CERT_BYTES_3, "bytes32")
CERT_ID_4 = brownie.convert.to_bytes(CERT_BYTES_4, "bytes32")
CERT_PARAMS = [
    "bytes32",
    "bytes32",
    "bytes32",
    "bytes32",
    "bytes32[]",
    "uint32",
    "bytes32",
    "bytes",
    "bytes",
]
CHAIN_ID = 1
DAILY_MINT_LIMIT = 100
TARGET_SUBNET_ID = brownie.convert.to_bytes("0x02", "bytes32")
DUMMY_DATA = brownie.convert.to_bytes("0x00", "bytes")
ENDPOINT = "http://127.0.0.1"
INCORRECT_FUNC_SELECTOR = brownie.convert.to_bytes("0xfefe", "bytes4")
INDEX_OF_DATA_IN_TX_RAW = 33
INDEX_OF_DATA_IN_TX_RAW_OUT_OF_BOUNDS = 295  # Total len of TX_RAW = 298
LOGO_URL = "http://image-url.com"
MINT_AMOUNT = 100
MINT_CAP = 1000
SOURCE_SUBNET_ID = brownie.convert.to_bytes("0x01", "bytes32")
SOURCE_SUBNET_ID_2 = brownie.convert.to_bytes("0x89", "bytes32")
SOURCE_SUBNET_ID_3 = brownie.convert.to_bytes("0x99", "bytes32")
PAYLOAD = brownie.convert.to_bytes("0xdead", "bytes")
PEER_ID = brownie.convert.to_bytes("0xdeaf", "bytes")
SEND_AMOUNT = 50
STATE_ROOT = brownie.convert.to_bytes("0xfeed", "bytes32")
SUBNET_BYTES = "0xdeaf"
SUBNET_NAME = "Test Subnet"
SUBNET_ID = brownie.convert.to_bytes(SUBNET_BYTES, "bytes")
SUBNET_CURRENCY_SYMBOL = "SUB"
TEST_KEY = brownie.convert.to_bytes("0xaabb", "bytes32")
TOKEN_NAME = "TestToken"
TOKEN_SYMBOL_X = "TKX"
TOKEN_SYMBOL_Y = "TKY"
TX_RAW = (
    "0xf901270c8083b71b0094420b1099b9ef5baba6d92029594ef45e19a04a4a80b8c"
    "4b32c8105000000000000000000000000000000000000000000000000000000000000"
    "00020000000000000000000000000063046686e46dc6f15918b61ae2b121458534a50"
    "000000000000000000000000000000000000000000000000000000000000080000000"
    "000000000000000000000000000000000000000000000000000000003200000000000"
    "00000000000000000000000000000000000000000000000000003544b580000000000"
    "000000000000000000000000000000000000000000000000820a96a0e22c8390af305"
    "726f772ca556cebe356619b9e1a718cf8b638d6b2b8c3e8f7cfa045b579b1ecb8259a"
    "a7b1f694ee61319131fc7bc2b2eeaa8bbbb6e99257c84ce3"
)
TX_RAW_MINT_EXCEED = (
    "0xf901270c8083b71b0094420b1099b9ef5baba6d92029594ef45e19a04a4a80b8c"
    "4b32c810500000000000000000000000000000000000000000000000000000000000"
    "000020000000000000000000000000063046686e46dc6f15918b61ae2b121458534a"
    "50000000000000000000000000000000000000000000000000000000000000080000"
    "000000000000000000000000000000000000000000000000000000000006e0000000"
    "000000000000000000000000000000000000000000000000000000003544b5800000"
    "00000000000000000000000000000000000000000000000000000820a95a08c499cd"
    "f62064c6c3171aad4639a374a3e5d101ab275a1908d887c89a35a57f7a03d9373910"
    "185cbb6f847562959cd270ad2e16aa2708ad7d72184036283204cb4"
)
TX_RAW_ZERO_ADDRESS = (
    "0xf901270c8083b71b0094420b1099b9ef5baba6d92029594ef45e19a04a4a80b8c"
    "4b32c810500000000000000000000000000000000000000000000000000000000000"
    "00002000000000000000000000000000000000000000000000000000000000000000"
    "00000000000000000000000000000000000000000000000000000000000000080000"
    "00000000000000000000000000000000000000000000000000000000000320000000"
    "000000000000000000000000000000000000000000000000000000003544b5800000"
    "00000000000000000000000000000000000000000000000000000820a95a071b106f"
    "5f5700a9ac6f3359e883bedc7fafcc4a98fd3e6f09a32b4966941884ba02e02afdc9"
    "0fbb59a52c526c3fa6ac6d12e799ac4e090825d27521dab61c20ae2"
)
TX_ROOT = brownie.convert.to_bytes("0xf00d", "bytes32")

# admin params
ADMIN_PARAMS = [
    "address[]",  # admin addresses
    "uint256",  # admin threshold
]
# token to be deployed params
TOKEN_PARAMS = [
    "string",  # name
    "string",  # symbol
    "uint256",  # cap
    "address",  # token address
    "uint256",  # daily mint limit
]
# token to mint params
MINT_TOKEN_PARAMS = [
    "bytes32",  # target subnet id
    "address",  # receiver
    "string",  # symbol
    "uint256",  # amount
]
VERIFIER = 1
